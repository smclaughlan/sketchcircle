[{"/home/seneca/333_cs/sketchcircle/src/index.js":"1","/home/seneca/333_cs/sketchcircle/src/App.js":"2","/home/seneca/333_cs/sketchcircle/src/config.js":"3","/home/seneca/333_cs/sketchcircle/src/utils/history.js":"4","/home/seneca/333_cs/sketchcircle/src/redux/configureStore.js":"5","/home/seneca/333_cs/sketchcircle/src/Theme.js":"6","/home/seneca/333_cs/sketchcircle/src/redux/user.js":"7","/home/seneca/333_cs/sketchcircle/src/redux/sketchbook.js":"8","/home/seneca/333_cs/sketchcircle/src/components/Main.js":"9","/home/seneca/333_cs/sketchcircle/src/components/Login.js":"10","/home/seneca/333_cs/sketchcircle/src/components/Footer.js":"11","/home/seneca/333_cs/sketchcircle/src/components/Nav.js":"12","/home/seneca/333_cs/sketchcircle/src/components/UserUpdate.js":"13","/home/seneca/333_cs/sketchcircle/src/components/Register.js":"14","/home/seneca/333_cs/sketchcircle/src/components/SketchTimeline.js":"15","/home/seneca/333_cs/sketchcircle/src/components/InsideSketchbook.js":"16","/home/seneca/333_cs/sketchcircle/src/components/EditPost.js":"17","/home/seneca/333_cs/sketchcircle/src/components/ShoutBox.js":"18","/home/seneca/333_cs/sketchcircle/src/components/Sketchbook.js":"19","/home/seneca/333_cs/sketchcircle/src/components/LineGraph.js":"20","/home/seneca/333_cs/sketchcircle/src/components/MDE.js":"21","/home/seneca/333_cs/sketchcircle/src/components/FollowBtn.js":"22","/home/seneca/333_cs/sketchcircle/src/components/AddData.js":"23"},{"size":1054,"mtime":1609538989450,"results":"24","hashOfConfig":"25"},{"size":1767,"mtime":1607638056387,"results":"26","hashOfConfig":"25"},{"size":451,"mtime":1609376179440,"results":"27","hashOfConfig":"25"},{"size":87,"mtime":1592520334470,"results":"28","hashOfConfig":"25"},{"size":504,"mtime":1592437381610,"results":"29","hashOfConfig":"25"},{"size":476,"mtime":1596149330030,"results":"30","hashOfConfig":"25"},{"size":3221,"mtime":1595288085530,"results":"31","hashOfConfig":"25"},{"size":5958,"mtime":1607638056547,"results":"32","hashOfConfig":"25"},{"size":7619,"mtime":1612832258280,"results":"33","hashOfConfig":"25"},{"size":2256,"mtime":1610062179850,"results":"34","hashOfConfig":"25"},{"size":1495,"mtime":1610062006920,"results":"35","hashOfConfig":"25"},{"size":2515,"mtime":1610062241220,"results":"36","hashOfConfig":"25"},{"size":1659,"mtime":1610062328550,"results":"37","hashOfConfig":"25"},{"size":3090,"mtime":1610062260290,"results":"38","hashOfConfig":"25"},{"size":4132,"mtime":1610062310650,"results":"39","hashOfConfig":"25"},{"size":14376,"mtime":1612993504496,"results":"40","hashOfConfig":"25"},{"size":940,"mtime":1612831139950,"results":"41","hashOfConfig":"25"},{"size":2781,"mtime":1610062286170,"results":"42","hashOfConfig":"25"},{"size":1473,"mtime":1610061202640,"results":"43","hashOfConfig":"25"},{"size":7268,"mtime":1613069906596,"results":"44","hashOfConfig":"25"},{"size":2439,"mtime":1607638056457,"results":"45","hashOfConfig":"25"},{"size":1815,"mtime":1612992558306,"results":"46","hashOfConfig":"25"},{"size":1727,"mtime":1612830992320,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},"l3h6nx",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"51"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"51"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"51"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"51"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"51"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"51"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"/home/seneca/333_cs/sketchcircle/src/index.js",["102","103","104","105"],"import React from 'react';\nimport { Router } from 'react-router-dom';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport configureStore from './redux/configureStore';\nimport history from \"./utils/history\";\nimport openSocket from 'socket.io-client';\nimport { apiBaseUrl, localBaseUrl, gAnalytics } from './config';\n\n// import ReactGA from 'react-ga';\n\n// ReactGA.initialize(`${gAnalytics}`);\n// ReactGA.pageview(window.location.pathname + window.location.search);\n\n// const socket = openSocket(`${localBaseUrl}`);\n// socket.on('error', (error) => {\n//   console.error(error);\n// });\n\nconst preloadedState = {\n  user: {\n    token: localStorage.getItem(\"x-access-token\"),\n    currentUserId: localStorage.getItem(\"currentUserId\"),\n  },\n};\n\nconst store = configureStore(preloadedState);\n\n\nReactDOM.render(\n  <Router history={history}>\n    <Provider store={store}>\n      <App />\n      {/* <App socket={socket} /> */}\n    </Provider>\n  </Router>,\n  document.getElementById('root')\n);\n",["106","107"],"/home/seneca/333_cs/sketchcircle/src/App.js",[],"/home/seneca/333_cs/sketchcircle/src/config.js",[],"/home/seneca/333_cs/sketchcircle/src/utils/history.js",[],"/home/seneca/333_cs/sketchcircle/src/redux/configureStore.js",[],"/home/seneca/333_cs/sketchcircle/src/Theme.js",[],"/home/seneca/333_cs/sketchcircle/src/redux/user.js",[],"/home/seneca/333_cs/sketchcircle/src/redux/sketchbook.js",["108","109","110","111"],"import { apiBaseUrl } from '../config';\n\n\nconst GET_SKETCHBOOKS = 'sketchcircle/sketchbooks/GET_SKETCHBOOKS';\nconst ADD_FOLLOW = 'sketchcircle/sketchbooks/ADD_FOLLOW';\nconst DELETE_FOLLOW = 'sketchcircle/sketchbooks/DELETE_FOLLOW';\nconst ADD_POST = 'sketchcircle/sketchbooks/ADD_POST';\nconst UPDATE_POST = 'sketchcircle/sketchbooks/UPDATE_POST';\nconst DELETE_POST = 'sketchcircle/sketchbooks/DELETE_POST';\nconst ADD_GOAL = 'sketchcircle/sketchbooks/ADD_GOAL';\nconst ADD_DATAPOINT = 'sketchcircle/sketchbooks/ADD_DATAPOINT';\n\n\nexport const getSketchbooks = (sketchbooks) => ({ type: GET_SKETCHBOOKS, sketchbooks });\nexport const addFollow = (newFollow) => ({ type: ADD_FOLLOW, newFollow });\nexport const deleteFollow = (removedFollow) => ({ type: DELETE_FOLLOW, removedFollow });\nexport const addPost = (newPost) => ({ type: ADD_POST, newPost });\nexport const updatePost = (updPost) => ({ type: UPDATE_POST, updPost });\nexport const delPost = () => ({ type: DELETE_POST });\nexport const addGoal = (newGoal) => ({ type: ADD_GOAL, newGoal });\nexport const addDataPoint = (newDataPoint) => ({ type: ADD_DATAPOINT, newDataPoint });\n\nexport const getSketchbooksReq = (currentUserId) => async (dispatch) => {\n  const res = await fetch(`${apiBaseUrl}/sketchbooks`);\n\n  if (res.ok) {\n    const sketchbooks = await res.json();\n    const follows = sketchbooks['follows'];\n    const newFollows = {}\n    follows.forEach(follow => {\n      if (follow[0] === Number(currentUserId)) {\n        newFollows[follow[1]] = true;\n      }\n    });\n    sketchbooks['follows'] = newFollows;\n    dispatch(getSketchbooks(sketchbooks));\n  }\n}\n\nexport const getPostsReq = (sketchbook_id) => async dispatch => {\n  const res = await fetch(`${apiBaseUrl}/sketchbooks/${sketchbook_id}`);\n  if (res.ok) {\n    const posts = await res.json();\n    dispatch(addPost(posts));\n  }\n}\n\nexport const sendPostReq = (token, sketchbook_id, msgBody) => async dispatch => {\n  const res = await fetch(`${apiBaseUrl}/sketchbooks/${sketchbook_id}`, {\n    method: \"post\",\n    body: JSON.stringify({ msgBody }),\n    headers: {\n      \"x-access-token\": `${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n\n  if (res.ok) {\n    const newPost = await res.json();\n    dispatch(addPost(newPost));\n  }\n}\n\nexport const sendNewGoalReq = (token, newGoalData) => async dispatch => {\n  const res = await fetch(`${apiBaseUrl}/goal`, {\n    method: \"post\",\n    body: JSON.stringify(newGoalData),\n    headers: {\n      \"x-access-token\": `${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (res.ok) {\n    const newGoal = await res.json();\n    dispatch(addGoal(newGoal));\n    window.location.href = window.location.href;\n  }\n}\n\nexport const sendAddDataPointReq = (token, goalId, value) => async dispatch => {\n  const res = await fetch(`${apiBaseUrl}/goal/newdata`, {\n    method: \"post\",\n    body: JSON.stringify({ 'goalid': goalId, 'value': value }),\n    headers: {\n      \"x-access-token\": `${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (res.ok) {\n    const newDataPoint = await res.json();\n    dispatch(addDataPoint(newDataPoint));\n    window.location.href = window.location.href;\n  }\n}\n\nexport const addFollowReq = (token, sketchbook_id) => async dispatch => {\n  const res = await fetch(`${apiBaseUrl}/sketchbooks/${sketchbook_id}/follow`, {\n    method: \"post\",\n    headers: {\n      \"x-access-token\": `${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n\n  if (res.ok) {\n    const newFollow = await res.json();\n    dispatch(addFollow(newFollow));\n    // window.location.href = \"/\"\n  }\n}\n\nexport const deleteFollowReq = (token, sketchbook_id) => async dispatch => {\n  const res = await fetch(`${apiBaseUrl}/sketchbooks/${sketchbook_id}/follow`, {\n    method: \"delete\",\n    headers: {\n      \"x-access-token\": `${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n\n  if (res.ok) {\n    const removedFollow = await res.json();\n    dispatch(deleteFollow(removedFollow));\n    // window.location.href = \"/\" //if the async await calls don't work, backup\n  }\n}\n\nexport const sendDeletePostReq = (token, postId) => async dispatch => {\n  const res = await fetch(`${apiBaseUrl}/posts/${postId}`, {\n    method: \"delete\",\n    headers: {\n      \"x-access-token\": `${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  if (res.ok) {\n    const delRes = await res.json();\n    // dispatch(delPost());\n  }\n}\n\nexport const sendUpdatePostReq = (token, postId, text, skbId) => async dispatch => {\n  const res = await fetch(`${apiBaseUrl}/posts/${postId}`, {\n    method: \"put\",\n    body: JSON.stringify({ \"body\": `${text}` }),\n    headers: {\n      \"x-access-token\": `${token}`,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n\n  // if (res.ok) {\n  //   const updRes = await res.json();\n  //need to add updated post to state\n  // window.location.href = `/sketchbook/${skbId}`;\n  let updPost = { skbId, postId, text };\n  dispatch(updatePost(updPost));\n  // }\n}\n\nexport default function reducer(state = {}, action) {\n  switch (action.type) {\n    case GET_SKETCHBOOKS: {\n\n      return {\n        ...state,\n        ...action.sketchbooks,\n      }\n    }\n    case ADD_FOLLOW: {\n      const newFollows = Object.assign(state.follows, action.newFollow);\n      return {\n        ...state,\n        follows: newFollows,\n      }\n    }\n    case DELETE_FOLLOW: {\n      const deleteKey = action.removedFollow.sketchbook_id;\n      delete state.follows[deleteKey];\n      return {\n        ...state,\n      }\n    }\n    case ADD_POST: {\n      return {\n        ...state,\n        ...action.newPost,\n      }\n    }\n    case UPDATE_POST: {\n      const { skbId, postId, text } = action.updPost;\n      state[\"posts\"][skbId][postId][\"body\"] = text;\n      return {\n        ...state,\n      }\n    }\n    case ADD_GOAL: {\n      return {\n        ...state,\n        ...action.newGoal,\n      }\n    }\n    case ADD_DATAPOINT: {\n\n      return {\n        ...state,\n      }\n    }\n    default: return state;\n  }\n}\n","/home/seneca/333_cs/sketchcircle/src/components/Main.js",["112","113"],"import React from 'react';\nimport { connect } from 'react-redux';\n// import { makeStyles } from '@material-ui/core/styles';\nimport { Button, Container, Paper, Grid, Typography } from '@material-ui/core';\nimport { getSketchbooksReq } from '../redux/sketchbook';\nimport Sketchbook from './Sketchbook';\nimport ShoutBox from './ShoutBox';\n// import MDE from './MDE'; //TODO: Let admin users update a front page message?\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     flexGrow: 1,\n//     backgroundImage: theme.gradientBackground,\n//     marginBottom: 64\n//   },\n// }));\n\nfunction Main(props) {\n  // const classes = useStyles();\n\n  const [pageNum, setPageNum] = React.useState(1);\n  const skbPerPage = 12;\n  let totalPages = 0;\n\n  const followedSketchbooks = [];\n  if (props.follows) {\n    const followedKeys = Object.keys(props.follows);\n    props.sketchbooks.forEach(book => { //check each from sketchbooks arr...\n      Object.keys(book).forEach(k => { //using the key, which is the sketchbook_id\n        if (followedKeys.includes(k)) { //the sketchbook_id is in followedKeys\n          followedSketchbooks.push(book); //so push the book\n        }\n      })\n    })\n  }\n\n  const displayedSketchbooks = [];\n  if (props.sketchbooks) {\n    totalPages = Math.ceil(props.sketchbooks.length / skbPerPage);\n    if (totalPages < 1) {\n      totalPages = 1;\n    }\n    for (let i = pageNum * skbPerPage - skbPerPage; i < pageNum * skbPerPage; i++) {\n      if (props.sketchbooks[i]) {\n        displayedSketchbooks.push(props.sketchbooks[i]);\n      }\n    }\n  }\n\n  React.useEffect(() => {\n    const userId = props.currentUserId;\n    props.getSketchbooksReq(userId);\n  }, [props.currentUserId])\n\n  const firstPage = () => {\n    setPageNum(1);\n  }\n\n  const prevPage = () => {\n    setPageNum(pageNum - 1);\n  }\n\n  const nextPage = () => {\n    setPageNum(pageNum + 1);\n  }\n\n  const lastPage = () => {\n    setPageNum(totalPages);\n  }\n\n  if (followedSketchbooks.length > 0 && props.sketchbooks) {\n    return (\n      <>\n        <Container style={{ marginTop: \"100px\" }}>\n          <Typography variant=\"h3\" align=\"center\">SketchCircle</Typography>\n          <Typography align=\"center\">A community for developing artists reaching goals together</Typography>\n        </Container>\n        {/* <ShoutBox /> no shoutbox for now */}\n        <Container>\n          <Paper style={{ margin: \"20px\" }} elevation={3}>\n            <Typography variant=\"h5\" style={{ padding: \"10px\" }}>Starred Sketchbooks</Typography>\n            <Grid container spacing={3}>\n              {followedSketchbooks.map(book => {\n                return (\n                  Object.keys(book).map(k => {\n                    return (\n                      <Grid key={k} item xs={3}>\n                        <Sketchbook\n                          {...props}\n                          sketchbook_id={book[k].sketchbook_id}\n                          avatar={book[k].avatar}\n                          owner_id={book[k].owner_id}\n                          title={book[k].title}\n                          timestamp={book[k].timestamp} />\n                      </Grid>\n                    )\n                  }))\n              })}\n            </Grid>\n          </Paper>\n        </Container>\n        <Container>\n          <Paper style={{ margin: \"20px\" }} elevation={3}>\n            <Typography variant=\"h5\" style={{ padding: \"10px\" }}>All Sketchbooks</Typography>\n            <Grid container spacing={3}>\n              {displayedSketchbooks.map(book => {\n                return (\n                  Object.keys(book).map(k => {\n                    return (\n                      <Grid key={k} item xs={3}>\n                        <Sketchbook\n                          sketchbook_id={k}\n                          owner_id={book[k].owner_id}\n                          avatar={book[k].avatar}\n                          title={book[k].title}\n                          timestamp={book[k].timestamp} />\n                      </Grid>\n                    )\n                  })\n                )\n              })}\n            </Grid>\n          </Paper>\n          <Container>\n            {pageNum > 1 ?\n              <Button variant=\"outlined\" style={{ marginTop: \"10px\", marginRight: \"10px\" }} onClick={firstPage}>First</Button>\n              :\n              <>\n              </>\n            }\n            {pageNum > 1 ?\n              <Button variant=\"outlined\" style={{ marginTop: \"10px\", marginRight: \"10px\" }} onClick={prevPage}>Prev</Button>\n              :\n              <>\n              </>\n            }\n            {pageNum < totalPages ?\n              <Button variant=\"outlined\" style={{ marginTop: \"10px\", marginRight: \"10px\" }} onClick={nextPage}>Next</Button>\n              :\n              <>\n              </>\n            }\n            {pageNum < totalPages ?\n              <Button variant=\"outlined\" style={{ marginTop: \"10px\", marginRight: \"10px\" }} onClick={lastPage}>Last</Button>\n              :\n              <>\n              </>\n            }\n          </Container>\n        </Container>\n      </>\n    )\n  }\n\n  if (props.sketchbooks) {\n    return (\n      <>\n        <Container style={{ marginTop: \"100px\" }}>\n          <Typography variant=\"h3\" align=\"center\">SketchCircle</Typography>\n          <Typography align=\"center\">A community for developing artists reaching goals together</Typography>\n        </Container>\n        {/* <ShoutBox {...props} /> */}\n        <Container>\n          <Paper style={{ margin: \"20px\" }} elevation={3}>\n            <Grid container spacing={3}>\n              {displayedSketchbooks.map(book => {\n                return (\n                  Object.keys(book).map(k => {\n                    return (\n                      <Grid key={k} item xs={3}>\n                        <Sketchbook\n                          sketchbook_id={k}\n                          owner_id={book[k].owner_id}\n                          avatar={book[k].avatar}\n                          title={book[k].title}\n                          timestamp={book[k].timestamp} />\n                      </Grid>\n                    )\n                  })\n                )\n              })}\n            </Grid>\n          </Paper>\n          <Container>\n            {pageNum > 1 ?\n              <Button variant=\"outlined\" style={{ marginTop: \"10px\", marginRight: \"10px\" }} onClick={firstPage}>First</Button>\n              :\n              <>\n              </>\n            }\n            {pageNum > 1 ?\n              <Button variant=\"outlined\" style={{ marginTop: \"10px\", marginRight: \"10px\" }} onClick={prevPage}>Prev</Button>\n              :\n              <>\n              </>\n            }\n            {pageNum < totalPages ?\n              <Button variant=\"outlined\" style={{ marginTop: \"10px\", marginRight: \"10px\" }} onClick={nextPage}>Next</Button>\n              :\n              <>\n              </>\n            }\n            {pageNum < totalPages ?\n              <Button variant=\"outlined\" style={{ marginTop: \"10px\", marginRight: \"10px\" }} onClick={lastPage}>Last</Button>\n              :\n              <>\n              </>\n            }\n          </Container>\n        </Container>\n      </>\n    )\n  }\n\n  return <Typography>Loading...</Typography>\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.user.token,\n    currentUserId: state.user.currentUserId,\n    sketchbooks: state.sketchbook.sketchbooks,\n    follows: state.sketchbook.follows,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getSketchbooksReq: (...args) => dispatch(getSketchbooksReq(...args)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(\n  Main\n);\n","/home/seneca/333_cs/sketchcircle/src/components/Login.js",[],"/home/seneca/333_cs/sketchcircle/src/components/Footer.js",[],"/home/seneca/333_cs/sketchcircle/src/components/Nav.js",["114"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport { sendLogoutReq } from '../redux/user';\n\nconst useStyles = makeStyles((theme) => ({\n  bar: {\n    backgroundColor: theme.primaryColor,\n  },\n  barButton: {\n    '&:hover': {\n      backgroundColor: '#990000',\n    }\n  }\n}));\n\nfunction NavBar(props) {\n  const classes = useStyles();\n\n  const logOut = () => {\n    props.sendLogoutReq();\n  }\n\n  const navigation = props.currentUserId ? (\n    <Grid container spacing={3}>\n      <Grid item xs={10}>\n        <NavLink style={{ color: 'white' }} to=\"/\">\n          <Button className={classes.barButton} color=\"inherit\">Sketchcircle</Button>\n        </NavLink>\n      </Grid>\n      <Grid item xs={2}>\n        <NavLink style={{ color: 'white' }} to=\"/\">\n          <Button className={classes.barButton} color=\"inherit\" onClick={logOut}>Logout</Button>\n        </NavLink>\n        <NavLink style={{ color: 'white' }} to=\"/update\">\n          <Button className={classes.barButton} color=\"inherit\">Edit Account</Button>\n        </NavLink>\n      </Grid>\n    </Grid >\n  ) : (\n      <Grid container spacing={3}>\n        <Grid item xs={10}>\n          <NavLink style={{ color: 'white' }} to=\"/\">\n            <Button className={classes.barButton} color=\"inherit\">Sketchcircle</Button>\n          </NavLink>\n        </Grid>\n        <Grid item xs={2}>\n          <NavLink style={{ color: 'white' }} to=\"/register\">\n            <Button className={classes.barButton} color=\"inherit\">Register</Button>\n          </NavLink>\n          <NavLink style={{ color: 'white' }} to=\"/login\">\n            <Button className={classes.barButton} color=\"inherit\">Login</Button>\n          </NavLink>\n        </Grid>\n      </Grid >\n    )\n\n\n  return (\n    <div >\n      <AppBar className={classes.bar} position=\"fixed\">\n        <Toolbar>\n          {navigation}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUserId: state.user.currentUserId,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    sendLogoutReq: () => dispatch(sendLogoutReq()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(\n  NavBar\n);\n","/home/seneca/333_cs/sketchcircle/src/components/UserUpdate.js",[],"/home/seneca/333_cs/sketchcircle/src/components/Register.js",[],"/home/seneca/333_cs/sketchcircle/src/components/SketchTimeline.js",["115"],"import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Button } from '@material-ui/core';\nimport { getPostsReq } from '../redux/sketchbook';\nimport Timeline from '@material-ui/lab/Timeline';\nimport TimelineItem from '@material-ui/lab/TimelineItem';\nimport TimelineSeparator from '@material-ui/lab/TimelineSeparator';\nimport TimelineConnector from '@material-ui/lab/TimelineConnector';\nimport TimelineContent from '@material-ui/lab/TimelineContent';\nimport TimelineDot from '@material-ui/lab/TimelineDot';\nimport TimelineOppositeContent from '@material-ui/lab/TimelineOppositeContent';\nimport Typography from '@material-ui/core/Typography';\nimport moment from 'moment';\n\nfunction SketchTimeline(props) {\n\n  const sketchbookId = window.location.href.split('/')[4];\n\n  React.useEffect(() => {\n    props.getPostsReq(sketchbookId);\n  }, []);\n\n  const imgUrls = {}; //key will be date, value will be array of urls\n  if (props.posts && props.posts[sketchbookId]) {\n    const allSkbPosts = props.posts[sketchbookId];\n    const skbPosts = [];\n    Object.keys(allSkbPosts).forEach(k => {\n      if (allSkbPosts[k].user_id === parseInt(sketchbookId)) {\n        skbPosts.push(allSkbPosts[k]);\n      }\n    })\n    const imgRe = /(((https:\\/\\/www)|(https:\\/\\/)|(www)|(http:\\/\\/www)|(http:\\/\\/))[-a-zA-Z0-9@:%+.~#?&//=_]+)[.](jpg|jpeg|gif|png|bmp|tiff|tga|svg)/;\n    Object.keys(skbPosts).forEach(k => {\n      const currPost = skbPosts[k];\n      const postSplitOnReturns = currPost.body.split('\\n').join(' ');\n      const sectionsBody = postSplitOnReturns.split(' ');\n      let currImgUrls = [];\n\n      sectionsBody.forEach(section => { //for each section, check\n        let matches = imgRe.exec(section); //if it's a url\n\n        if (matches) { //if it is\n          currImgUrls.push(matches[0]); //push the url here\n        }\n      });\n\n      if (currImgUrls.length > 0) { //if currImgUrls has anything\n        let currDate = moment(currPost.timestamp)\n          .toDate()\n          .toLocaleString()\n          .split(',')[0]; //will use timestamp for key\n        if (imgUrls[currDate]) {\n          let currDateImgUrls = imgUrls[currDate];\n          currDateImgUrls.push(...currImgUrls); //spread to prevent nested arrays\n          imgUrls[currDate] = currDateImgUrls;\n        } else {\n          imgUrls[currDate] = currImgUrls; //add it to imgUrls\n        }\n      }\n    });\n  }\n\n\n  return (\n    <div>\n      <Timeline align=\"alternate\" style={{ marginTop: \"5%\" }}>\n        <NavLink to={`/sketchbook/${sketchbookId}`}>\n          <Button variant=\"outlined\" color=\"primary\">Back to sketchbook</Button>\n        </NavLink>\n        {imgUrls ?\n          Object.keys(imgUrls).map(imgKeyDate => {\n            const dateForPost = imgKeyDate;\n            return (\n              <TimelineItem key={dateForPost}>\n                <TimelineOppositeContent>\n                  <Typography color=\"textSecondary\">{dateForPost}</Typography>\n                </TimelineOppositeContent>\n                <TimelineSeparator>\n                  <TimelineDot />\n                  <TimelineConnector />\n                </TimelineSeparator>\n                <TimelineContent>\n                  {imgUrls[dateForPost].map(url => {\n                    return (\n                      <img key={url} style={{ maxWidth: \"500px\" }} src={`${url}`} alt=\"Timeline art\" />\n                    )\n                  })}\n                </TimelineContent>\n              </TimelineItem>\n            )\n          })\n          :\n          <div>\n            No images found.\n        </div>\n        }\n        <NavLink to={`/sketchbook/${sketchbookId}`}>\n          <Button variant=\"outlined\" color=\"primary\">Back to sketchbook</Button>\n        </NavLink>\n      </Timeline>\n    </div>\n  )\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    posts: state.sketchbook.posts,\n    currentUserId: state.user.currentUserId,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getPostsReq: (...args) => dispatch(getPostsReq(...args)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(\n  SketchTimeline\n);\n","/home/seneca/333_cs/sketchcircle/src/components/InsideSketchbook.js",["116","117","118","119","120","121"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport MDE from './MDE';\nimport * as Showdown from \"showdown\";\nimport { getPostsReq, sendNewGoalReq, sendDeletePostReq } from '../redux/sketchbook';\nimport ReactMarkdown from 'react-markdown';\nimport { Button, Container, Divider, TextField, Typography, Paper, Grid } from '@material-ui/core';\nimport { Edit, DeleteForever } from '@material-ui/icons';\nimport LineGraph from './LineGraph';\n\nconst converter = new Showdown.Converter({\n  tables: true,\n  simplifiedAutoLink: true,\n  strikethrough: true,\n  tasklists: true\n});\n\nfunction InsideSketchbook(props) {\n  const [newGoalData, setNewGoalData] = React.useState({\n    title: '',\n    description: '',\n    target: 1,\n    targetDate: '',\n  });\n  const [displayedGoals, setDisplayedGoals] = React.useState();\n  const [refs, setRefs] = React.useState({});\n\n  const pageButtons = React.useRef(null);\n  const pageBottom = React.useRef(null);\n\n\n  const [pageNum, setPageNum] = React.useState(1);\n  let displayedPosts = [];\n  const postsPerPage = 5;\n  let totalPages = 0;\n\n  const sketchbookId = window.location.href.split('/')[4];\n\n\n  /** Goal Related **/\n  React.useEffect(() => {\n    if (props.goals && props.goals[sketchbookId]) {\n      setDisplayedGoals(props.goals[sketchbookId]);\n    }\n  }, [props.goals]);\n\n\n  const titleChange = event => {\n    setNewGoalData({\n      ...newGoalData,\n      title: event.target.value\n    })\n  }\n\n  const descriptionChange = event => {\n    setNewGoalData({\n      ...newGoalData,\n      description: event.target.value\n    })\n  }\n\n  const targetChange = event => {\n    try {\n      const num = Number(event.target.value);\n      setNewGoalData({\n        ...newGoalData,\n        target: num\n      })\n    } catch {\n      console.log('Goal target must be number');\n    }\n  }\n\n  const targetDateChange = event => {\n    setNewGoalData({\n      ...newGoalData,\n      targetDate: event.target.value\n    })\n  }\n\n  const newGoal = (e) => {\n    e.preventDefault();\n    props.sendNewGoalReq(props.token, newGoalData);\n  }\n\n\n  let goToPage = Number(window.localStorage.getItem(\"pageNum\"));\n  if (goToPage > 1) {\n    setPageNum(goToPage);\n    window.localStorage.setItem(\"pageNum\", 1);\n  }\n\n  /** Post Related **/\n  const updateDisplayedPosts = () => {\n    if (props.posts && props.posts[sketchbookId]) {\n      let skbPosts = props.posts[sketchbookId];\n      totalPages = Math.ceil(Object.keys(skbPosts).length / postsPerPage);\n      if (totalPages < 1) {\n        totalPages = 1;\n      }\n      const postKeys = Object.keys(skbPosts);\n      for (let i = 0; i < postKeys.length; i++) {\n        const earliestPostOnPageOrLater = i >= pageNum * postsPerPage - postsPerPage;\n        const lastPostOnPageOrEarlier = i < pageNum * postsPerPage;\n        let currPost = skbPosts[postKeys[i]];\n        if (earliestPostOnPageOrLater && lastPostOnPageOrEarlier) {\n          currPost.displayed = true;\n        } else {\n          currPost.displayed = false;\n        }\n        displayedPosts = [...displayedPosts, currPost];\n      }\n    }\n  }\n\n  let { posts } = props;\n\n  React.useEffect(() => {\n    updateDisplayedPosts();\n  }, [posts]);\n\n  React.useEffect(() => {\n    if (posts && posts.length > 0) {\n      let newRefs = Object.keys(posts[sketchbookId]).reduce((acc, value) => {\n        let id = posts[sketchbookId][value][\"id\"];\n        acc[id] = React.createRef();\n        return acc;\n      }, {});\n      setRefs(newRefs);\n    }\n  }, [posts]);\n\n\n  React.useEffect(() => {\n    props.getPostsReq(sketchbookId);\n  }, [sketchbookId]);\n\n  React.useEffect(() => {\n    updateDisplayedPosts();\n  }, [props.posts, displayedPosts]);\n\n  const deletePost = async (postId) => {\n    let wasLastPost = displayedPosts[displayedPosts.length - 1].id === postId;\n    await props.sendDeletePostReq(props.token, postId);\n    await props.getPostsReq(sketchbookId);\n    let isLastPostDisplayed = displayedPosts[displayedPosts.length - 2].displayed;\n    if (wasLastPost\n      && isLastPostDisplayed === false\n      && displayedPosts.length > postsPerPage) {\n      prevPage();\n    } else {\n      setPageNum(pageNum);\n    }\n  }\n\n  /** Scroll/Page Change **/\n  const scrollToPageButtons = () => {\n    pageButtons.current.scrollIntoView();\n  }\n\n  const scrollToPageBottom = () => {\n    if (pageBottom && pageBottom.current && pageBottom.current !== null) {\n      pageBottom.current.scrollIntoView();\n    }\n  }\n\n  const firstPage = () => {\n    setPageNum(1);\n    scrollToPageButtons();\n  }\n\n  const prevPage = () => {\n    setPageNum(pageNum - 1);\n    scrollToPageButtons();\n  }\n\n  const nextPage = () => {\n    setPageNum(pageNum + 1);\n    scrollToPageButtons();\n  }\n\n  const lastPage = () => {\n    setPageNum(totalPages);\n    scrollToPageButtons();\n  }\n\n  const lastPageBottom = () => {\n    setPageNum(totalPages);\n    scrollToPageBottom();\n  }\n\n  let justPosted = window.localStorage.getItem(\"justPosted\");\n  if (justPosted === \"true\") {\n    justPosted = \"false\";\n    window.localStorage.setItem(\"justPosted\", false);\n    lastPageBottom();\n  }\n\n  const scrollToPost = () => {\n    let scrollID = window.localStorage.getItem(\"scrollID\");\n    if (refs && refs[scrollID]) {\n      refs[scrollID].current.scrollIntoView({ behavior: 'smooth' });\n      window.localStorage.setItem(\"scrollID\", null);\n      window.localStorage.setItem(\"justEdited\", false);\n      window.localStorage.setItem(\"pageNum\", 1);\n    }\n  }\n\n  let justEdited = window.localStorage.getItem(\"justEdited\");\n  let scrollID = window.localStorage.getItem(\"scrollID\");\n  if (justEdited === \"true\"\n    && refs\n    && refs[scrollID]\n    && refs[scrollID].current !== null) {\n    props.getPostsReq(sketchbookId);\n    justEdited = \"false\";\n    scrollToPost();\n  }\n\n  const saveScrollID = (id) => {\n    window.localStorage.setItem(\"scrollID\", id);\n    window.localStorage.setItem(\"pageNum\", pageNum);\n  }\n\n  return (\n    <>\n      <Container style={{ marginTop: \"100px\" }}>\n        {displayedGoals ?\n          Object.keys(displayedGoals).map(k => {\n            return (\n              <div key={displayedGoals[k].id}>\n                <Paper style={{ margin: \"20px\" }}>\n                  <LineGraph\n                    id={displayedGoals[k].id}\n                    title={displayedGoals[k].title}\n                    description={displayedGoals[k].description}\n                    owner_id={displayedGoals[k].owner_id}\n                    sketchbook_id={displayedGoals[k].sketchbook_id}\n                    target={displayedGoals[k].target}\n                    targetDate={displayedGoals[k].targetdate}\n                    timestamp={displayedGoals[k].timestamp} />\n                </Paper>\n              </div>\n            )\n          })\n          :\n          <>\n          </>\n        }\n      </Container>\n      {sketchbookId === props.currentUserId ?\n        <Container style={{ marginTop: \"10px\" }}>\n          <Paper style={{ margin: \"20px\", padding: \"15px\" }}>\n            <form onSubmit={newGoal}>\n              <Typography variant=\"h5\">New Goal</Typography>\n              <Typography>Create a new goal with a title, description, target value to reach, and a target date.\n              For example, a title might be \"Draw 5 portrait sketches in 7 days\", which would have a target value of 5,\n              and a target date 7 days from now.\n              </Typography>\n              <div>\n                <TextField label=\"Title\" onChange={titleChange} />\n              </div>\n              <div>\n                <TextField label=\"Description\" multiline onChange={descriptionChange} />\n              </div>\n              <div>\n                <TextField label=\"Target Value\" onChange={targetChange} />\n              </div>\n              <div>\n                <TextField label=\"Target Date\" type=\"date\" InputLabelProps={{ shrink: true }} onChange={targetDateChange} />\n              </div>\n              <div>\n                <Button variant=\"contained\" type=\"submit\" style={{ marginTop: \"10px\" }}>Create new goal</Button>\n              </div>\n            </form>\n          </Paper>\n        </Container>\n        :\n        <>\n        </>\n      }\n      <Container ref={pageButtons}>\n        <Container>\n          {displayedPosts.length > 0 ?\n            <Button variant=\"contained\" href={`/sketchbook/${sketchbookId}/timeline`}>View Timeline</Button>\n            :\n            <></>}\n        </Container>\n        <Container style={{ marginTop: '30px' }}>\n          {pageNum > 1 ?\n            <Button variant=\"outlined\" style={{ marginTop: \"10px\", marginRight: \"10px\" }} onClick={firstPage}>First</Button>\n            :\n            <>\n            </>\n          }\n          {pageNum > 1 ?\n            <Button variant=\"outlined\" style={{ marginTop: \"10px\", marginRight: \"10px\" }} onClick={prevPage}>Prev</Button>\n            :\n            <>\n            </>\n          }\n          {pageNum < totalPages ?\n            <Button variant=\"outlined\" style={{ marginTop: \"10px\", marginRight: \"10px\" }} onClick={nextPage}>Next</Button>\n            :\n            <>\n            </>\n          }\n          {pageNum < totalPages ?\n            <Button variant=\"outlined\" style={{ marginTop: \"10px\", marginRight: \"10px\" }} onClick={lastPage}>Last</Button>\n            :\n            <>\n            </>\n          }\n        </Container>\n        {displayedPosts.length > 0 ?\n          Object.keys(displayedPosts).map(k => {\n            if (displayedPosts[k].displayed === true) {\n              return (\n                <>\n                  <div ref={refs[displayedPosts[k].id]} style={{ padding: '0px' }}></div>\n                  <Paper style={{ margin: '50px' }} >\n                    <Container style={{ margin: '10px', padding: '10px' }} key={displayedPosts[k].id}>\n                      <Grid container>\n                        <Grid item xs={11}>\n                          <NavLink\n                            style={{ color: \"#d33232\" }}\n                            onClick={() => {\n                              props.getPostsReq(displayedPosts[k].user_id);\n                              firstPage();\n                            }}\n                            to={`/sketchbook/${displayedPosts[k].user_id}`}>\n                            {displayedPosts[k].avatar ?\n                              <img className=\"postAvatar\" alt={`${displayedPosts[k].username}'s avatar`} src={displayedPosts[k].avatar} />\n                              :\n                              <></>\n                            }\n                            <Typography>{displayedPosts[k].username}</Typography>\n                          </NavLink>\n                        </Grid>\n                        <Grid item xs={1}>\n                          {displayedPosts[k].user_id === parseInt(props.currentUserId) ?\n                            <DeleteForever className=\"deleteButton\" color=\"primary\" onClick={() => { deletePost(displayedPosts[k].id) }} />\n                            :\n                            <>\n                            </>\n                          }\n                        </Grid>\n                      </Grid>\n                      <Divider variant=\"middle\"></Divider>\n                      <ReactMarkdown source={displayedPosts[k].body} />\n                      <Divider variant=\"middle\"></Divider>\n                      <p>{displayedPosts[k].timestamp}</p>\n                      {displayedPosts[k].user_id === parseInt(props.currentUserId) ?\n                        <>\n                          <NavLink to={`/sketchbook/${sketchbookId}/post/${displayedPosts[k].id}/edit`}>\n                            <Edit color=\"primary\" onClick={() => { saveScrollID(displayedPosts[k].id) }} />\n                          </NavLink>\n                        </>\n                        :\n                        <>\n                        </>\n                      }\n                    </Container>\n                  </Paper>\n                </>\n              )\n            } else {\n              return (\n                <>\n                  <div ref={refs[displayedPosts[k].id]} style={{ padding: '0px', visibility: 'hidden' }}></div>\n                </>\n              )\n            }\n          })\n          :\n          <></>\n        }\n        {displayedPosts.length === 0 && props.token ?\n          <Typography style={{ marginTop: \"100px\", marginBottom: \"10px\" }}>No posts found. Introduce yourself or welcome the new user!</Typography>\n          :\n          <>\n          </>\n        }\n        {displayedPosts.length === 0 && !props.token ?\n          <Typography style={{ marginTop: \"100px\", marginBottom: \"10px\" }}>No posts found. Register/sign in to post!</Typography>\n          :\n          <>\n          </>\n        }\n        <Container ref={pageBottom}>\n          {pageNum > 1 ?\n            <Button variant=\"outlined\" style={{ marginRight: \"10px\", marginBottom: \"10px\" }} onClick={firstPage}>First</Button>\n            :\n            <>\n            </>\n          }\n          {pageNum > 1 ?\n            <Button variant=\"outlined\" style={{ marginRight: \"10px\", marginBottom: \"10px\" }} onClick={prevPage}>Prev</Button>\n            :\n            <>\n            </>\n          }\n          {pageNum < totalPages ?\n            <Button variant=\"outlined\" style={{ marginRight: \"10px\", marginBottom: \"10px\" }} onClick={nextPage}>Next</Button>\n            :\n            <>\n            </>\n          }\n          {\n            pageNum < totalPages ?\n              <Button variant=\"outlined\" style={{ marginRight: \"10px\", marginBottom: \"10px\" }} onClick={lastPage}>Last</Button>\n              :\n              <>\n              </>\n          }\n        </Container >\n      </Container >\n      <Container>\n        {props.token ?\n          <MDE lastPage={lastPage} sketchbook_id={sketchbookId} />\n          :\n          <>\n          </>\n        }\n      </Container>\n    </>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.user.token,\n    currentUserId: state.user.currentUserId,\n    posts: state.sketchbook.posts,\n    goals: state.sketchbook.goals,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getPostsReq: (...args) => dispatch(getPostsReq(...args)),\n    sendNewGoalReq: (...args) => dispatch(sendNewGoalReq(...args)),\n    sendDeletePostReq: (...args) => dispatch(sendDeletePostReq(...args)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(\n  InsideSketchbook\n);\n","/home/seneca/333_cs/sketchcircle/src/components/EditPost.js",[],"/home/seneca/333_cs/sketchcircle/src/components/ShoutBox.js",["122","123","124","125","126","127","128","129"],"import React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { Card, CardContent, Divider, Typography } from '@material-ui/core';\nimport { apiBaseUrl, localBaseUrl } from '../config';\n\n\nfunction ShoutBox(props) {\n  const [socket, setSocket] = React.useState(props.socket);\n  const [socketConnected, setSocketConnected] = React.useState(false);\n  const [chatMessages, setChatMessages] = React.useState();\n  const [sendMsg, setSendMsg] = React.useState();\n  const [localIdNum, setLocalIdNum] = React.useState();\n\n  React.useEffect(() => {\n    getChats();\n  }, []);\n\n  React.useEffect(() => {\n    if (!socket) return;\n\n    socket.on('connect', () => {\n      setSocketConnected(socket.connected);\n      console.log('connected!')\n    });\n    socket.on('disconnect', () => {\n      setSocketConnected(socket.connected);\n      console.log('disconnected!')\n    });\n\n  }, [socket]);\n\n  async function getChats() {\n    const res = await fetch(`${apiBaseUrl}/chatmessages`);\n    if (res.ok) {\n      let chats = await res.json()\n      setChatMessages(chats);\n    }\n  }\n\n  async function sendChat() {\n    const res = await fetch(`${apiBaseUrl}/chatmessages`, {\n      method: 'post',\n      body: JSON.stringify(sendMsg),\n      headers: {\n        \"x-access-token\": `${props.token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    if (res.ok) {\n      const newPost = await res.json();\n      // getChats(); //socket.io will handle this\n    }\n  }\n\n  function inputChange(event) {\n    setSendMsg({\n      body: event.target.value,\n    });\n  }\n\n  function inputCheck(event) {\n    if (event.keyCode === 13) sendChat();\n  }\n\n  return (\n    <Card style={{ margin: \"5px auto\", maxWidth: \"300px\" }} variant=\"outlined\">\n      {socketConnected ? <p>Connected</p> : <p>Disconnected</p>}\n      <CardContent>\n        <ul id=\"chatMessages\" style={{ listStyleType: \"none\" }}>\n          {chatMessages ?\n            Object.keys(chatMessages).map((chId) => {\n              return (\n                <li>{chatMessages[chId][\"username\"]}: {chatMessages[chId][\"body\"]}</li>\n              )\n            })\n            :\n            <li>Loading...</li>}\n        </ul>\n        {props.token ?\n          <form action=\"#\">\n            <input id=\"send\" autoComplete=\"off\" onChange={inputChange} onKeyUp={inputCheck} />\n            <button type=\"button\" onClick={sendChat}>Send</button>\n          </form>\n          :\n          <>\n          </>}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.user.token,\n    currentUserId: state.user.currentUserId,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(\n  ShoutBox\n);\n","/home/seneca/333_cs/sketchcircle/src/components/Sketchbook.js",[],"/home/seneca/333_cs/sketchcircle/src/components/LineGraph.js",["130","131"],"/home/seneca/333_cs/sketchcircle/src/components/MDE.js",[],"/home/seneca/333_cs/sketchcircle/src/components/FollowBtn.js",[],"/home/seneca/333_cs/sketchcircle/src/components/AddData.js",[],{"ruleId":"132","severity":1,"message":"133","line":9,"column":8,"nodeType":"134","messageId":"135","endLine":9,"endColumn":18},{"ruleId":"132","severity":1,"message":"136","line":10,"column":10,"nodeType":"134","messageId":"135","endLine":10,"endColumn":20},{"ruleId":"132","severity":1,"message":"137","line":10,"column":22,"nodeType":"134","messageId":"135","endLine":10,"endColumn":34},{"ruleId":"132","severity":1,"message":"138","line":10,"column":36,"nodeType":"134","messageId":"135","endLine":10,"endColumn":46},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":76,"column":28,"nodeType":"145","messageId":"146","endLine":76,"endColumn":48},{"ruleId":"143","severity":1,"message":"144","line":92,"column":28,"nodeType":"145","messageId":"146","endLine":92,"endColumn":48},{"ruleId":"132","severity":1,"message":"147","line":137,"column":11,"nodeType":"134","messageId":"135","endLine":137,"endColumn":17},{"ruleId":"132","severity":1,"message":"148","line":143,"column":9,"nodeType":"134","messageId":"135","endLine":143,"endColumn":12},{"ruleId":"132","severity":1,"message":"149","line":7,"column":8,"nodeType":"134","messageId":"135","endLine":7,"endColumn":16},{"ruleId":"150","severity":1,"message":"151","line":53,"column":6,"nodeType":"152","endLine":53,"endColumn":27,"suggestions":"153"},{"ruleId":"132","severity":1,"message":"154","line":9,"column":8,"nodeType":"134","messageId":"135","endLine":9,"endColumn":18},{"ruleId":"150","severity":1,"message":"155","line":22,"column":6,"nodeType":"152","endLine":22,"endColumn":8,"suggestions":"156"},{"ruleId":"132","severity":1,"message":"157","line":12,"column":7,"nodeType":"134","messageId":"135","endLine":12,"endColumn":16},{"ruleId":"150","severity":1,"message":"158","line":46,"column":6,"nodeType":"152","endLine":46,"endColumn":19,"suggestions":"159"},{"ruleId":"150","severity":1,"message":"160","line":121,"column":6,"nodeType":"152","endLine":121,"endColumn":13,"suggestions":"161"},{"ruleId":"150","severity":1,"message":"158","line":132,"column":6,"nodeType":"152","endLine":132,"endColumn":13,"suggestions":"162"},{"ruleId":"150","severity":1,"message":"151","line":137,"column":6,"nodeType":"152","endLine":137,"endColumn":20,"suggestions":"163"},{"ruleId":"150","severity":1,"message":"160","line":141,"column":6,"nodeType":"152","endLine":141,"endColumn":35,"suggestions":"164"},{"ruleId":"132","severity":1,"message":"165","line":3,"column":10,"nodeType":"134","messageId":"135","endLine":3,"endColumn":17},{"ruleId":"132","severity":1,"message":"166","line":4,"column":29,"nodeType":"134","messageId":"135","endLine":4,"endColumn":36},{"ruleId":"132","severity":1,"message":"167","line":4,"column":38,"nodeType":"134","messageId":"135","endLine":4,"endColumn":48},{"ruleId":"132","severity":1,"message":"137","line":5,"column":22,"nodeType":"134","messageId":"135","endLine":5,"endColumn":34},{"ruleId":"132","severity":1,"message":"168","line":9,"column":18,"nodeType":"134","messageId":"135","endLine":9,"endColumn":27},{"ruleId":"132","severity":1,"message":"169","line":13,"column":10,"nodeType":"134","messageId":"135","endLine":13,"endColumn":20},{"ruleId":"132","severity":1,"message":"170","line":13,"column":22,"nodeType":"134","messageId":"135","endLine":13,"endColumn":35},{"ruleId":"132","severity":1,"message":"171","line":52,"column":13,"nodeType":"134","messageId":"135","endLine":52,"endColumn":20},{"ruleId":"150","severity":1,"message":"172","line":100,"column":6,"nodeType":"152","endLine":100,"endColumn":8,"suggestions":"173"},{"ruleId":"150","severity":1,"message":"174","line":114,"column":6,"nodeType":"152","endLine":114,"endColumn":24,"suggestions":"175"},"no-unused-vars","'openSocket' is defined but never used.","Identifier","unusedVar","'apiBaseUrl' is defined but never used.","'localBaseUrl' is defined but never used.","'gAnalytics' is defined but never used.","no-native-reassign",["176"],"no-negated-in-lhs",["177"],"no-self-assign","'window.location.href' is assigned to itself.","MemberExpression","selfAssignment","'delRes' is assigned a value but never used.","'res' is assigned a value but never used.","'ShoutBox' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.","ArrayExpression",["178"],"'IconButton' is defined but never used.","React Hook React.useEffect has missing dependencies: 'props' and 'sketchbookId'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.",["179"],"'converter' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'sketchbookId'. Either include it or remove the dependency array.",["180"],"React Hook React.useEffect has a missing dependency: 'updateDisplayedPosts'. Either include it or remove the dependency array.",["181"],["182"],["183"],["184"],"'NavLink' is defined but never used.","'Divider' is defined but never used.","'Typography' is defined but never used.","'setSocket' is assigned a value but never used.","'localIdNum' is assigned a value but never used.","'setLocalIdNum' is assigned a value but never used.","'newPost' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'dateFromTargetDate', 'dateFromTimestamp', 'dateLabels', 'goalDisplayTotal', 'idealData', 'props.datapoints', 'props.id', 'props.target', and 'userData'. Either include them or remove the dependency array. You can also do a functional update 'setGoalDisplayTotal(g => ...)' if you only need 'goalDisplayTotal' in the 'setGoalDisplayTotal' call.",["185"],"React Hook React.useEffect has missing dependencies: 'props.id' and 'total'. Either include them or remove the dependency array. You can also do a functional update 'setTotal(t => ...)' if you only need 'total' in the 'setTotal' call.",["186"],"no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"189","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},"Update the dependencies array to be: [props, props.currentUserId]",{"range":"204","text":"205"},"Update the dependencies array to be: [props, sketchbookId]",{"range":"206","text":"207"},"Update the dependencies array to be: [props.goals, sketchbookId]",{"range":"208","text":"209"},"Update the dependencies array to be: [posts, updateDisplayedPosts]",{"range":"210","text":"211"},"Update the dependencies array to be: [posts, sketchbookId]",{"range":"212","text":"213"},{"range":"214","text":"207"},"Update the dependencies array to be: [props.posts, displayedPosts, updateDisplayedPosts]",{"range":"215","text":"216"},"Update the dependencies array to be: [dateFromTargetDate, dateFromTimestamp, dateLabels, goalDisplayTotal, idealData, props.datapoints, props.id, props.target, userData]",{"range":"217","text":"218"},"Update the dependencies array to be: [props.datapoints, props.id, total]",{"range":"219","text":"220"},[1671,1692],"[props, props.currentUserId]",[896,898],"[props, sketchbookId]",[1349,1362],"[props.goals, sketchbookId]",[3186,3193],"[posts, updateDisplayedPosts]",[3495,3502],"[posts, sketchbookId]",[3575,3589],[3652,3681],"[props.posts, displayedPosts, updateDisplayedPosts]",[4011,4013],"[dateFromTargetDate, dateFromTimestamp, dateLabels, goalDisplayTotal, idealData, props.datapoints, props.id, props.target, userData]",[4382,4400],"[props.datapoints, props.id, total]"]